name: "SonarScanner Analysis"
description: "Run SonarScanner analysis with local Docker containers"
author: "Diego Maroto"
branding:
  icon: "check-square"
  color: "blue"

inputs:
  project-key:
    description: "Project key for the analysis"
    required: true
  sources:
    description: "Source directories to analyze"
    required: false
    default: "."
  exclusions:
    description: "Patterns to exclude from analysis"
    required: false
    default: "**/node_modules/**,**/dist/**"
  wait-for-server:
    description: "Time in seconds to wait for SonarQube server to start"
    required: false
    default: "60"
  retention-days:
    description: "Number of days to retain the uploaded artifact"
    required: false
    default: "7"

runs:
  using: "composite"
  steps:
    - name: Set up Docker
      shell: bash
      run: docker --version

    - name: Start SonarQube Server
      shell: bash
      run: |
        echo "Starting SonarQube server container..."
        docker run -d --name sonar-server \
          -p 9000:9000 \
          sonarqube:lts-community

        # Wait for server to be ready
        echo "Waiting for SonarQube to start..."
        timeout=${{ inputs.wait-for-server }}
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          if [ "$timeout" -le 0 ]; then
            echo "Timeout waiting for SonarQube server"
            exit 1
          fi
          echo "Waiting... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout - 5))
        done

        # Get default token (for community edition)
        echo "Generating authentication token..."
        TOKEN=$(docker exec sonar-server wget -qO- --auth-no-challenge \
          --http-user=admin --http-password=admin \
          --header="Content-Type: application/x-www-form-urlencoded" \
          --post-data="name=test-token" \
          http://localhost:9000/api/user_tokens/generate | grep -o '"token":"[^"]*' | cut -d'"' -f4)

        echo "SONAR_TOKEN=${TOKEN}" >> $GITHUB_ENV

    - name: Run SonarScanner
      shell: bash
      run: |
        echo "Running SonarScanner analysis..."
        echo "Debug: Current directory contents:"
        ls -la
        
        echo "Debug: Workspace contents:"
        ls -la ${{ github.workspace }}
        
        echo "Debug: Sources path contents:"
        ls -la ${{ inputs.sources }}
        
        echo "Debug: Environment variables:"
        printenv | grep SONAR
        
        echo "Debug: Token validation:"
        curl -s -u "${SONAR_TOKEN}:" http://localhost:9000/api/authentication/validate
        
        echo "Running scanner with verbose output..."
        docker run --rm \
          --network="host" \
          -v "${{ github.workspace }}:/usr/src" \
          -e SONAR_HOST_URL="http://localhost:9000" \
          -e SONAR_TOKEN="${SONAR_TOKEN}" \
          -e SONAR_VERBOSE="true" \
          -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ inputs.project-key }} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.sources=${{ inputs.sources }} \
            -Dsonar.exclusions=${{ inputs.exclusions }} \
            -Dsonar.scm.provider=git \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.verbose=true \
            -Dsonar.log.level=DEBUG \
            -X" \
          sonarsource/sonar-scanner-cli
        
        echo "Debug: Checking if project was created:"
        curl -s -u "${SONAR_TOKEN}:" "http://localhost:9000/api/projects/search?projects=${{ inputs.project-key }}" | jq .

    - name: Package Results
      shell: bash
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        RESULTS_DIR="sonar-results_${TIMESTAMP}"
        mkdir -p "${RESULTS_DIR}"

        {
          echo "# üîç SonarQube Analysis Results"
          echo "## Project Information"
          echo "- **Project Key**: ${{ inputs.project-key }}"
          echo "- **Date**: $(date)"
          echo "- **Runner**: ${{ runner.os }}"
          
          echo "## üéØ Quality Gate Status"
          
          # Extract task ID from the analysis output
          TASK_ID=$(tail -n 10 sonar_analysis.log | grep "task?id=" | sed -n 's/.*task?id=\([^]]*\).*/\1/p')
          echo "Waiting for analysis to be processed (Task ID: $TASK_ID)..."
          
          # Wait for the analysis to be processed
          while true; do
            TASK_STATUS=$(curl -s -u "${SONAR_TOKEN}:" \
              "http://localhost:9000/api/ce/task?id=${TASK_ID}" | \
              jq -r '.task.status')
            
            if [ "$TASK_STATUS" = "SUCCESS" ]; then
              break
            elif [ "$TASK_STATUS" = "FAILED" ] || [ "$TASK_STATUS" = "CANCELED" ]; then
              echo "Error: Analysis processing failed with status: $TASK_STATUS"
              exit 1
            fi
            
            echo "Analysis is still being processed... Status: $TASK_STATUS"
            sleep 5
          done
          
          QUALITY_GATE=$(curl -s -u "${SONAR_TOKEN}:" \
            "http://localhost:9000/api/qualitygates/project_status?projectKey=${{ inputs.project-key }}" | \
            jq -r '.projectStatus.status')
          echo "**Status**: ${QUALITY_GATE:-'N/A'}"
          
          echo "## üìä Metrics"
          METRICS=$(curl -s -u "${SONAR_TOKEN}:" \
            "http://localhost:9000/api/measures/component?component=${{ inputs.project-key }}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,reliability_rating,security_rating,sqale_rating")
          
          echo "| Metric | Value | Rating |"
          echo "|--------|--------|--------|"
          {
            echo "Bugs|$(jq -r '.component.measures[] | select(.metric == "bugs") | .value' <<< "$METRICS")|$(jq -r '.component.measures[] | select(.metric == "reliability_rating") | .value' <<< "$METRICS")"
            echo "Vulnerabilities|$(jq -r '.component.measures[] | select(.metric == "vulnerabilities") | .value' <<< "$METRICS")|$(jq -r '.component.measures[] | select(.metric == "security_rating") | .value' <<< "$METRICS")"
            echo "Code Smells|$(jq -r '.component.measures[] | select(.metric == "code_smells") | .value' <<< "$METRICS")|$(jq -r '.component.measures[] | select(.metric == "sqale_rating") | .value' <<< "$METRICS")"
            echo "Coverage|$(jq -r '.component.measures[] | select(.metric == "coverage") | .value' <<< "$METRICS")|N/A"
            echo "Duplicated Lines|$(jq -r '.component.measures[] | select(.metric == "duplicated_lines_density") | .value' <<< "$METRICS")|N/A"
          } | while IFS=\| read -r metric value rating; do
            # Convert ratings from numbers to letters (1=A, 2=B, etc)
            rating_letter=""
            case $rating in
              "1") rating_letter="A" ;;
              "2") rating_letter="B" ;;
              "3") rating_letter="C" ;;
              "4") rating_letter="D" ;;
              "5") rating_letter="E" ;;
              *) rating_letter="$rating" ;;
            esac
            echo "| $metric | ${value:-0} | ${rating_letter:-N/A} |"
          done

          echo "## üîç Analysis Configuration"
          echo "### Source Directories"
          echo "\`\`\`"
          ls -la ${{ inputs.sources }}
          echo "\`\`\`"
          
          echo "### Environment"
          echo "\`\`\`"
          printenv | grep SONAR || echo "No SONAR environment variables found"
          echo "\`\`\`"
          
          echo "### Scanner Configuration"
          echo "- Sources: \`${{ inputs.sources }}\`"
          echo "- Exclusions: \`${{ inputs.exclusions }}\`"
          echo "- Project Key: \`${{ inputs.project-key }}\`"
          
          echo "## üêõ Issues Breakdown"
          ISSUES=$(curl -s -u "${SONAR_TOKEN}:" \
            "http://localhost:9000/api/issues/search?projectKeys=${{ inputs.project-key }}&facets=types,severities")
          
          echo "### By Type"
          echo "| Type | Count |"
          echo "|------|-------|"
          jq -r '.facets[] | select(.property == "types") | .values[] | "| \(.val) | \(.count) |"' <<< "$ISSUES"
          
          echo "### By Severity"
          echo "| Severity | Count |"
          echo "|----------|--------|"
          jq -r '.facets[] | select(.property == "severities") | .values[] | "| \(.val) | \(.count) |"' <<< "$ISSUES"
          
        } >> $GITHUB_STEP_SUMMARY

        echo "Debug: Checking SonarQube server status..."
        curl -v -s http://localhost:9000/api/system/status

        echo "Debug: Checking token validity..."
        curl -v -s -u "${SONAR_TOKEN}:" http://localhost:9000/api/authentication/validate

        # Get analysis results from API with verbose output
        echo "Debug: Fetching issues..."
        ISSUES_RESPONSE=$(curl -v -s -u "${SONAR_TOKEN}:" \
          "http://localhost:9000/api/issues/search?projectKeys=${{ inputs.project-key }}")
        echo "$ISSUES_RESPONSE" > "${RESULTS_DIR}/issues.json"
        
        echo "Debug: Fetching metrics..."
        METRICS_RESPONSE=$(curl -v -s -u "${SONAR_TOKEN}:" \
          "http://localhost:9000/api/measures/component?component=${{ inputs.project-key }}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density")
        echo "$METRICS_RESPONSE" > "${RESULTS_DIR}/metrics.json"

        # Get project information
        echo "Debug: Fetching project info..."
        curl -v -s -u "${SONAR_TOKEN}:" \
          "http://localhost:9000/api/projects/search?projects=${{ inputs.project-key }}" \
          > "${RESULTS_DIR}/project_info.json"

        # Create detailed summary
        {
          echo "SonarScanner Analysis Results"
          echo "=========================="
          echo "Project Key: ${{ inputs.project-key }}"
          echo "Date: $(date)"
          echo "Runner: ${{ runner.os }}"
          
          echo -e "\nServer Status:"
          curl -s http://localhost:9000/api/system/status | jq '.'
          
          echo -e "\nProject Information:"
          jq '.' "${RESULTS_DIR}/project_info.json"
          
          echo -e "\nMetrics:"
          if [ -s "${RESULTS_DIR}/metrics.json" ]; then
            jq -r '.component.measures[] | "\(.metric): \(.value)"' "${RESULTS_DIR}/metrics.json" || echo "Error parsing metrics JSON"
            echo "Raw metrics response:"
            cat "${RESULTS_DIR}/metrics.json"
          else
            echo "No metrics data found"
          fi
          
          echo -e "\nIssues Summary:"
          if [ -s "${RESULTS_DIR}/issues.json" ]; then
            echo "Total issues: $(jq -r '.total' "${RESULTS_DIR}/issues.json")"
            echo "Issues by type:"
            jq -r '.issues[] | .type' "${RESULTS_DIR}/issues.json" | sort | uniq -c || echo "No issues found"
            echo "Issues by severity:"
            jq -r '.issues[] | .severity' "${RESULTS_DIR}/issues.json" | sort | uniq -c || echo "No issues found"
            echo "Raw issues response:"
            cat "${RESULTS_DIR}/issues.json"
          else
            echo "No issues data found"
          fi
          
          echo -e "\nEnvironment Information:"
          echo "Docker containers running:"
          docker ps
          echo -e "\nDocker logs from sonar-server:"
          docker logs sonar-server
        } > "${RESULTS_DIR}/summary.txt"

        # Create ZIP archive
        zip -r "sonar-results_${TIMESTAMP}.zip" "${RESULTS_DIR}"

    - name: Upload Results
      uses: actions/upload-artifact@v3
      with:
        name: sonar-analysis-results
        path: sonar-results_*.zip
        retention-days: ${{ inputs.retention-days }}

    - name: Cleanup
      shell: bash
      if: always()
      run: |
        echo "Stopping SonarQube server..."
        docker stop sonar-server || true
        docker rm sonar-server || true
