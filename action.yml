name: "SonarScanner Analysis"
description: "Run SonarScanner analysis with local Docker containers"
author: "Diego Maroto"
branding:
  icon: "check-square"
  color: "blue"

inputs:
  project-key:
    description: "Project key for the analysis"
    required: true
  sources:
    description: "Source directories to analyze"
    required: false
    default: "."
  exclusions:
    description: "Patterns to exclude from analysis"
    required: false
    default: "**/node_modules/**,**/dist/**"
  wait-for-server:
    description: "Time in seconds to wait for SonarQube server to start"
    required: false
    default: "60"
  retention-days:
    description: "Number of days to retain the uploaded artifact"
    required: false
    default: "7"

runs:
  using: "composite"
  steps:
    - name: Set up Docker
      shell: bash
      run: docker --version

    - name: Start SonarQube Server
      shell: bash
      run: |
        echo "Starting SonarQube server container..."
        docker run -d --name sonar-server \
          -p 9000:9000 \
          sonarqube:lts-community

        # Wait for server to be ready
        echo "Waiting for SonarQube to start..."
        timeout=${{ inputs.wait-for-server }}
        until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
          if [ "$timeout" -le 0 ]; then
            echo "Timeout waiting for SonarQube server"
            exit 1
          fi
          echo "Waiting... ($timeout seconds remaining)"
          sleep 5
          timeout=$((timeout - 5))
        done

        # Get default token (for community edition)
        echo "Generating authentication token..."
        TOKEN=$(docker exec sonar-server wget -qO- --auth-no-challenge \
          --http-user=admin --http-password=admin \
          --header="Content-Type: application/x-www-form-urlencoded" \
          --post-data="name=test-token" \
          http://localhost:9000/api/user_tokens/generate | grep -o '"token":"[^"]*' | cut -d'"' -f4)

        echo "SONAR_TOKEN=${TOKEN}" >> $GITHUB_ENV

    - name: Run SonarScanner
      shell: bash
      run: |
        echo "Running SonarScanner analysis..."
        echo "Token: ${SONAR_TOKEN}"
        docker ps
        docker run --rm \
          --network="host" \
          -v "${{ github.workspace }}:/usr/src" \
          -e SONAR_HOST_URL="http://localhost:9000" \
          -e SONAR_LOGIN="${SONAR_TOKEN}" \
          -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${{ inputs.project-key }} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.sources=${{ inputs.sources }} \
            -Dsonar.exclusions=${{ inputs.exclusions }} \
            -Dsonar.scm.provider=git \
            -Dsonar.sourceEncoding=UTF-8" \
          sonarsource/sonar-scanner-cli

    - name: Package Results
      shell: bash
      run: |
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        RESULTS_DIR="sonar-results_${TIMESTAMP}"
        mkdir -p "${RESULTS_DIR}"

        # Get analysis results from API
        curl -s -u "${SONAR_TOKEN}:" \
          "http://localhost:9000/api/issues/search?projectKeys=${{ inputs.project-key }}" \
          > "${RESULTS_DIR}/issues.json"

        curl -s -u "${SONAR_TOKEN}:" \
          "http://localhost:9000/api/measures/component?component=${{ inputs.project-key }}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density" \
          > "${RESULTS_DIR}/metrics.json"

        # Create summary
        {
          echo "SonarScanner Analysis Results"
          echo "=========================="
          echo "Project Key: ${{ inputs.project-key }}"
          echo "Date: $(date)"
          echo "Runner: ${{ runner.os }}"
          echo -e "\nMetrics:"
          jq -r '.component.measures[] | "\(.metric): \(.value)"' "${RESULTS_DIR}/metrics.json"
          echo -e "\nIssues Summary:"
          jq -r '.total' "${RESULTS_DIR}/issues.json"
        } > "${RESULTS_DIR}/summary.txt"

        # Create ZIP archive
        zip -r "sonar-results_${TIMESTAMP}.zip" "${RESULTS_DIR}"

    - name: Upload Results
      uses: actions/upload-artifact@v3
      with:
        name: sonar-analysis-results
        path: sonar-results_*.zip
        retention-days: ${{ inputs.retention-days }}

    - name: Cleanup
      shell: bash
      if: always()
      run: |
        echo "Stopping SonarQube server..."
        docker stop sonar-server || true
        docker rm sonar-server || true
